<!DOCTYPE html>
<html>
<head>
  <%- include ("../partials/header.ejs") %>
</head>

<body>

  <%- include ("../partials/nav.ejs") %>

<div class="jumbotron text-center">
  <div class="container">
    <a href="/" class="lang-logo">
      <img src="/lang-logo.png">
    </a>
    <h1>BucketWS + Heroku</h1>
    <h4>Getting Started with Node.js public upload demo</h4>

    <p>This is the simplest integration of the BucketWS addon with NodeJS, this is a simple demo to upload a file to a bucket.</p>
    <p>
      Check out the other demos for more functionalities, for example you can find the private files demo, you can upload private files and authorize users to view the files.
    </p>

    <a type="button" class="btn btn-lg btn-light" href="#"> Walkthought video</a>
    <a type="button" class="btn btn-lg btn-primary" href="https://github.com/vicjicaman/bucketws-heroku-upload"> Source on GitHub</a>
  </div>
</div>
<div class="container">

  <div class="col">
    <div class="my-sm-4">
      <p>Make sure take the bucket <b><%=bucketTarget%></b> exists! ( check out the <a target="_blank" href="#">Walkthought video</a> ) </p>
      <p>Upload a file to the <%=bucketMode%> bucket <b><%=bucketTarget%></b></p>
    </div>

    <form class="form">
      <div id="uploader-target"></div>
    </form>
    <div id="uploader-trigger">
      <button
        class="btn btn-primary"
        onclick="uploadObj.upload({tags: ['test', 'tags']})"
      >
        Upload
      </button>
    </div>

    <div class="row">
      <div class="col">
        <div id="uploader-result"></div>
      </div>
    </div>
  </div>

</div>


<script>
  <%- include ("../partials/utils.ejs") %>

  (async () => {
      var bucket = "<%= bucketTarget %>";
      var bucketMode = "<%= bucketMode %>";

      const immediate = true;
      const trigger = document.getElementById("uploader-trigger");
      trigger.style.display = !immediate ? "block" : "none";

      let allowFetch = true

      const loaderUrl= "https://editor.pagews.com/_PWSR_/lib/loader.gif"
      var uploadObj = window.PageWSLib.Upload.create({
        id: "uploader-target",
        domain,
        bucket,
        tags: ["test", "tutorial"],
        method: { type: "post", config: { url: "/app/signed-from-server/<%=bucketMode%>" } },
        component: {
          type: "simple-selector",
          config: {
            preview: true,
            controlLoadingAreaClass:  "text-center",
            controlLoadingAreaContent: `<img src="${loaderUrl}" />`,
            previewImageClass: "w-50 my-4",
            previewAreaClass: "text-center",
            controlAreaClass: "mb-4",
            controlContainerClass: "custom-file",
            controlClass: "custom-file-input",
            controlLabelClass: "custom-file-label",
            warningClass: "alert alert-warning",
            messageClass: "alert alert-info",
            errorClass: "alert alert-danger",
            labels: {
              select: "Choose file",
              browse: "Browse"
            }
          }
        },
        immediate,
        onSelected: ({ file, fileid }) => {
          const result = document.getElementById("uploader-result");
          result.innerHTML = ``;
        },
        onUploading: ({ fileid }) => {
          trigger.style.display = "none";
        },
        onUploaded: ({ fileid }) => {
          const result = document.getElementById("uploader-result");

          result.innerHTML = `
          <div class="row">
            <div class="col">
              <img src="${loaderUrl}" />
            </div>
          </div>`;
        },
        onReady: params => {

          if(!allowFetch){
            const result = document.getElementById("uploader-result");
            result.innerHTML = ``;
            return;
          }

          const { isMinimap, isImage } = params;
          if (immediate === false) {
            trigger.style.display = "block";
          }

          if (!isMinimap) {
            if (isImage) {
              printImageResult(params);
            } else {
              printFileResult(params);
            }
          }
        },
        onMinimapReady: params => {
          if(!allowFetch){
            return;
          }

          printMinimapResult(params);
        },
        onError: ({ fileid }) => {
          if (immediate === false) {
            trigger.style.display = "block";
          }
        }
      });

  })()

</script>


</body>
</html>
